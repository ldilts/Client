/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.awt.Color;
//import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
//import java.io.InputStreamReader;
//import java.io.PrintStream;
import java.net.Socket;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
//import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lucas
 */
public class Client extends javax.swing.JFrame {

    private Socket clientSocket;
    
//    private BufferedReader input;
    private DataInputStream dataInput;
//    private PrintStream output;
    private DataOutputStream dataOutput;
    
    public int currentID = 0;
    
    private static final String SERVER_ADDRESS = "200.19.188.1";
    private static final int TCP_SERVER_PORT = 20400;
    
//    private Scanner scan = new Scanner(System.in);
    final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        clientTextArea = new javax.swing.JTextArea();
        clientComboBox = new javax.swing.JComboBox();
        clientTextField = new javax.swing.JTextField();
        clientButton = new javax.swing.JButton();
        redPanel = new javax.swing.JPanel();
        greenPanel = new javax.swing.JPanel();
        bluePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clientTextArea.setColumns(20);
        clientTextArea.setRows(5);
        jScrollPane1.setViewportView(clientTextArea);

        clientComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose an Action", "hello", "ok", "yes", "no" }));

        clientButton.setText("Send");
        clientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientButtonActionPerformed(evt);
            }
        });

        redPanel.setBackground(new java.awt.Color(255, 229, 229));

        javax.swing.GroupLayout redPanelLayout = new javax.swing.GroupLayout(redPanel);
        redPanel.setLayout(redPanelLayout);
        redPanelLayout.setHorizontalGroup(
            redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        redPanelLayout.setVerticalGroup(
            redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        greenPanel.setBackground(new java.awt.Color(229, 255, 229));

        javax.swing.GroupLayout greenPanelLayout = new javax.swing.GroupLayout(greenPanel);
        greenPanel.setLayout(greenPanelLayout);
        greenPanelLayout.setHorizontalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 125, Short.MAX_VALUE)
        );
        greenPanelLayout.setVerticalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        bluePanel.setBackground(new java.awt.Color(229, 229, 255));

        javax.swing.GroupLayout bluePanelLayout = new javax.swing.GroupLayout(bluePanel);
        bluePanel.setLayout(bluePanelLayout);
        bluePanelLayout.setHorizontalGroup(
            bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 125, Short.MAX_VALUE)
        );
        bluePanelLayout.setVerticalGroup(
            bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(redPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(greenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bluePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                            .addComponent(clientComboBox, 0, 388, Short.MAX_VALUE)
                            .addComponent(clientTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                            .addComponent(clientButton, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clientButton, clientComboBox, clientTextField, jScrollPane1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(greenPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bluePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientButtonActionPerformed
        // TODO add your handling code here:
        if (hostAvailabilityCheck()) {
            if (clientSocket.isConnected()) {
            
//            System.out.println("Working? " + (String)clientComboBox.getSelectedItem());
//            (String)clientComboBox.getSelectedItem();
            
                if (clientComboBox.getSelectedIndex() != 0) {
    //                if (!"".equals(clientTextField.getText())) {
                        //            String reply = scan.nextLine();
    //                    String reply = clientTextField.getText();
                        Message message = new Message((byte) this.currentID, clientComboBox.getSelectedIndex());

                        try {
    //                        dataOutput.writeInt(message.getByteArray().length); // write length of the message
                            dataOutput.write(message.getByteArray());           // write the message
                        } catch (IOException ex) {
                            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                        }

    //                    output.println(reply);
    //                    clientTextArea.append("Client: " + reply + "\n");
    //                    System.out.println("Client: " + reply);

                        clientTextField.setText("");
    //                }
                } else {
                    String reply = clientTextField.getText();
                    byte[] replyBytes = reply.getBytes(Charset.forName("UTF-8"));
                    Message message = new Message((byte) this.currentID, replyBytes, true);

                    try {
    //                        dataOutput.writeInt(message.getByteArray().length); // write length of the message
                            dataOutput.write(message.getByteArray());           // write the message
                        } catch (IOException ex) {
                            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    //                    output.println(reply);
    //                    clientTextArea.append("Client: " + reply + "\n");
    //                    System.out.println("Client: " + reply);
                }     
            }
        } else {
            clientTextArea.append("Server offline. :( " + "\n");
        }
        
    }//GEN-LAST:event_clientButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Client().setVisible(true);
//            }
//        });
       
        Client client = new Client();
        Random rand = new Random();
        client.currentID = rand.nextInt((255 - 0) + 1) + 0;
        client.setVisible(true);
        client.run();
    }

    public void run() {
        try {
//            new Client().setVisible(true);

            // IP address to the PC to connect to.
            // Port number to connect to.
            clientSocket = new Socket(SERVER_ADDRESS, TCP_SERVER_PORT);
//            clientSocket = new Socket("localhost", 9999);

//            output = new PrintStream(clientSocket.getOutputStream());
            dataOutput = new DataOutputStream(clientSocket.getOutputStream());
//            output.println("Hello Server");
            
            Message sendThis = new Message((byte) this.currentID, 1);
//            dataOutput.writeInt(sendThis.getByteArray().length); // write length of the message
            dataOutput.write(sendThis.getByteArray());           // write the message
            
//            input = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            dataInput = new DataInputStream(clientSocket.getInputStream());
            
            while (clientSocket.isConnected()) {
//                String message = input.readLine();
//                clientTextArea.append("Server: " + message + "\n");
//                System.out.println("Server: " + message);
                
                int length = dataInput.available();                    // read length of incoming message
                if(length > 0) {

//                    while( dataInput.available() > 0) {
                       // read one single byte
                       byte startByte = dataInput.readByte();
                       if (startByte == (byte) 0x78) {
//                            System.out.println("Found a byte");
                            byte idByte = dataInput.readByte();
                            byte messageCodeByte = dataInput.readByte();
                            byte payloadLengthByte = dataInput.readByte();
                            byte[] messageBytes = new byte[payloadLengthByte];
                            
//                            System.out.println("Message length: " + payloadLengthByte);
                            
                            for (int i = 0; i < payloadLengthByte - 4; i++) {
                                messageBytes[i] = dataInput.readByte();
                            }
                            
//                            byte[] testMessage = new byte[length];
//                            dataInput.readFully(testMessage, 0, testMessage.length); // read the message
//                            System.out.println("Byte Aray: " + bytesToHexString(testMessage));
//                            clientTextArea.append("Byte Aray: " + bytesToHexString(testMessage) + "\n");
                            
                            Message message = new Message(idByte, messageCodeByte, payloadLengthByte , messageBytes);
                            switch (message.getMessageCodeByte()) {
                                case (byte) 0x4B:
                                    // Keep Alive
                                    byte[] keepAlive = new byte[] {
                                        (byte)0x78, (byte) 0x05, (byte) 0x72, (byte) 0x06, (byte) 0x4B, (byte) 0x41       
                                    };
                                    try {
//                                  dataOutput.writeInt(message.getByteArray().length); // write length of the message
                                    dataOutput.write(keepAlive);           // write the message
                                    } catch (IOException ex) {
                                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    break;
                                case (byte) 0xF1:
                                    // Red on
                                    redPanel.setBackground(Color.red);
                                    confirmationReply();
                                    break;
                                case (byte) 0xF2:
                                    // Red off
                                    redPanel.setBackground(new Color(255, 219, 219));
                                    confirmationReply();
                                    break;
                                case (byte) 0xF3:
                                    // Green on
                                    greenPanel.setBackground(Color.green);
                                    confirmationReply();
                                    break;
                                case (byte) 0xF4:
                                    // Green off
                                    greenPanel.setBackground(new Color(219, 255, 219));
                                    confirmationReply();
                                    break;
                                case (byte) 0xF5:
                                    // Blue on
                                    bluePanel.setBackground(Color.blue);
                                    confirmationReply();
                                    break;
                                case (byte) 0xF6:
                                    // Blue off
                                    bluePanel.setBackground(new Color(219, 219, 255));
                                    confirmationReply();
                                    break;
//                                case (byte) 0xF7:
//                                    
//                                    break;
                                case (byte) 0xF8:
                                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
                                    String sCertDate = dateFormat.format(new Date());
//                                    String timeStamp = sdf.toString();
                                    int timeStampPayloadLength = sCertDate.getBytes().length + 4;
                                    Message timeReply = new Message((byte) 0x05, (byte) 0x72, (byte) timeStampPayloadLength, sCertDate.getBytes());
                                    
                                    try {
                                    dataOutput.write(timeReply.getByteArray());           // write the message
                                    } catch (IOException ex) {
                                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    break;
                                case (byte) 0xF9:
                                    String decodedMessage = new String(message.getMessageBytes(), "UTF-8");  
                                    clientTextArea.append("Server: " + decodedMessage + "\n");
                                    confirmationReply();
                                    break;
                                default:
                                    String notSupported = "Not Suppported";
                                    int payloadLength = notSupported.getBytes().length + 4;
                                    Message reply = new Message((byte) 0x05, (byte) 0x72, (byte) payloadLength, notSupported.getBytes());
                                    
                                    try {
                                    dataOutput.write(reply.getByteArray());           // write the message
                                    } catch (IOException ex) {
                                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    break;
                            }
//                           break;
                        }
//                    }                    
                }
                

//                String reply = scan.nextLine();
//                output.println(reply);
            }
            System.out.println("\nDisconnected?\n");
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void confirmationReply() {
        String notSupported = "OK";
        int payloadLength = notSupported.getBytes().length + 4;
        Message reply = new Message((byte) 0x05, (byte) 0x72, (byte) payloadLength, notSupported.getBytes());

        try {
        dataOutput.write(reply.getByteArray());           // write the message
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    private static byte[] hexStringToByteArray(String s) {
//        int len = s.length();
//        byte[] data = new byte[len / 2];
//        for (int i = 0; i < len; i += 2) {
//            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
//                                 + Character.digit(s.charAt(i+1), 16));
//        }
//        return data;
//    }
   
    public static String bytesToHexString(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for ( int j = 0; j < bytes.length; j++ ) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }
    
    public static boolean hostAvailabilityCheck() { 
    try (Socket s = new Socket(SERVER_ADDRESS, TCP_SERVER_PORT)) {
        return true;
    } catch (IOException ex) {
        /* ignore */
    }
    return false;
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bluePanel;
    private javax.swing.JButton clientButton;
    private javax.swing.JComboBox clientComboBox;
    private javax.swing.JTextArea clientTextArea;
    private javax.swing.JTextField clientTextField;
    private javax.swing.JPanel greenPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel redPanel;
    // End of variables declaration//GEN-END:variables
}
